// -----------------------------------------------------------------------------
// tmp117_controller.v
// TMP117 kontrolcüsü: her saniye pointer yaz, MSB ve LSB oku, 16-bit raw veriyi valid ile çıkart
// Elinizdeki i2c_master ile birebir bağlanacak şekilde port ve sinyal isimleri uyumlu.
// -----------------------------------------------------------------------------
module tmp117_controller #(
  parameter SYS_CLK_FREQ = 100_000_000  // 100 MHz
)(
  input  wire        clk_i,        // sistem clock
  input  wire        rst_al_i,     // aktif düşük reset
  // Çıkış: ham sıcaklık ve valid flag
  output reg  [15:0] temp_raw_o,   // MSB: [15:8], LSB: [7:0]
  output reg         valid_o,
  // I2C master arayüzü (aynı isimlerle master’a bağlanacak)
  output reg         en_i,         // işlem başlatma pulse’u
  output reg  [6:0]  addr_i,       // 7-bit TMP117 I2C adresi
  output reg         rw_i,         // 0=write, 1=read
  output reg  [7:0]  data_wr_i,    // yazılacak bayt
  input  wire        busy_o,       // master meşgul bayrağı
  input  wire [7:0]  data_rd_o,    // master’dan okunan bayt
  input  wire        ack_error_o,  // ACK hatası (istersen check et)
  inout  wire        sda_io,       // I2C veri hattı
  inout  wire        scl_io        // I2C clock hattı
);

  // ---------------------------------------------------------------------------
  // Sabitler
  // ---------------------------------------------------------------------------
  localparam DEV_ADDR  = 7'h48;  // TMP117’in I2C adresi (A0,A1=GND)
  localparam REG_TEMP  = 8'h00;  // temperature register pointer
  localparam PERIOD    = SYS_CLK_FREQ; // 1 saniye = SYS_CLK_FREQ döngü

  // FSM durumları
  localparam IDLE      = 3'd0,
             WRITE_PTR = 3'd1,
             WAIT_WR   = 3'd2,
             READ_MSB  = 3'd3,
             WAIT_MSB  = 3'd4,
             READ_LSB  = 3'd5,
             WAIT_LSB  = 3'd6,
             DONE      = 3'd7;

  // ---------------------------------------------------------------------------
  // 1 Hz sayaç – her saniye tick_1hz = 1
  // ---------------------------------------------------------------------------
  reg [26:0] sec_cnt;
  reg        tick_1hz;
  always @(posedge clk_i or negedge rst_al_i) begin
    if (!rst_al_i) begin
      sec_cnt  <= 0;
      tick_1hz <= 0;
    end else if (sec_cnt == PERIOD-1) begin
      sec_cnt  <= 0;
      tick_1hz <= 1;
    end else begin
      sec_cnt  <= sec_cnt + 1;
      tick_1hz <= 0;
    end
  end

  // ---------------------------------------------------------------------------
  // FSM & I2C komut kuyruklayıcı
  // ---------------------------------------------------------------------------
  reg [2:0]   state;
  reg [15:0]  temp_buf;

  always @(posedge clk_i or negedge rst_al_i) begin
    if (!rst_al_i) begin
      // Reset: tüm çıkışları ve state’i sıfırla
      state      <= IDLE;
      en_i       <= 1'b0;
      addr_i     <= DEV_ADDR;
      rw_i       <= 1'b0;
      data_wr_i  <= 8'd0;
      temp_raw_o <= 16'd0;
      valid_o    <= 1'b0;
      temp_buf   <= 16'd0;
    end else begin
      // Default: pulse sinyallerini temizle, valid’i kapat
      en_i    <= 1'b0;
      valid_o <= 1'b0;

      case (state)
        // ---------------------------------------------------------------
        IDLE: begin
          if (tick_1hz) begin
            // 1 Hz’de pointer register (0x00) yazma isteği
            en_i      <= 1'b1;
            rw_i      <= 1'b0;      // write
            data_wr_i <= REG_TEMP;  // 0x00
            // addr_i zaten DEV_ADDR olarak yüklü
            state     <= WRITE_PTR;
          end
        end

        // ---------------------------------------------------------------
        WRITE_PTR: begin
          // en_i pulse’u verildi, busy_o = 1 olduğunda
          if (busy_o) begin
            state <= WAIT_WR;
          end
        end
