// -----------------------------------------------------------------------------
// tmp117_uart_top.v
// Top–level: TMP117 kontrolcüsü + I²C master + UART TX entegrasyonu
// -----------------------------------------------------------------------------
module tmp117_uart_top (
    input  wire        clk_i,       // 100 MHz sistem clock
    input  wire        rst_al_i,    // asenkron, aktif düşük reset
    inout  wire        sda_io,      // I²C data (open-drain)
    inout  wire        scl_io,      // I²C clock (open-drain)
    output wire        tx_o         // UART TX çıktı
);

  // ------------------------------------------------------------
  // 1) TMP117 controller + I²C master instantiation
  // ------------------------------------------------------------
  wire [15:0] temp_raw;
  wire        valid;

  tmp117_controller u_tmp117 (
      .clk_i      (clk_i),
      .rst_al_i   (rst_al_i),
      .temp_raw_o (temp_raw),
      .valid_o    (valid),
      .sda_io     (sda_io),
      .scl_io     (scl_io)
  );

  // ------------------------------------------------------------
  // 2) UART TX instantiation
  // ------------------------------------------------------------
  wire        tx_busy_o;
  wire        tx_done_o;
  reg  [7:0]  tx_data_i;
  reg         tx_start_i;

  uart_tx #(
      .CLK_FREQ   (100_000_000),  // sistem clock
      .BAUDRATE   (921600),       // baud rate
      .DATA_WIDTH (8),
      .STOP_BIT   (1)
  ) u_uart_tx (
      .clk_i       (clk_i),
      .rst_al_i    (rst_al_i),
      .tx_data_i   (tx_data_i),
      .tx_start_i  (tx_start_i),
      .tx_busy_o   (tx_busy_o),
      .tx_done_o   (tx_done_o),
      .tx_o        (tx_o)
  );

  // ------------------------------------------------------------
  // 3) Sıcaklığı MSB/LSB olarak UART’a yollayan FSM
  // ------------------------------------------------------------
  typedef enum logic [1:0] {
    TX_IDLE   = 2'd0,
    TX_MSB    = 2'd1,
    TX_LSB    = 2'd2
  } tx_state_t;

  tx_state_t  tx_state;
  
  always @(posedge clk_i or negedge rst_al_i) begin
    if (!rst_al_i) begin
      tx_state    <= TX_IDLE;
      tx_start_i  <= 1'b0;
      tx_data_i   <= 8'd0;
    end else begin
      // her clock başında pulse’ı temizle
      tx_start_i <= 1'b0;

      case (tx_state)
        //----------------------------------------
        TX_IDLE: begin
          // yeni veri geldiğinde ve UART boşsa önce MSB’i yolla
          if (valid && !tx_busy_o) begin
            tx_data_i  <= temp_raw[15:8];
            tx_start_i <= 1'b1;
            tx_state   <= TX_MSB;
          end
        end

        //----------------------------------------
        TX_MSB: begin
          // MSB gönderimi tamamlandığında
          if (tx_done_o) begin
            tx_data_i  <= temp_raw[7:0];
            tx_start_i <= 1'b1;
            tx_state   <= TX_LSB;
          end
        end

        //----------------------------------------
        TX_LSB: begin
          // LSB gönderimi tamamlandığında
          if (tx_done_o) begin
            tx_state   <= TX_IDLE;
          end
        end

        default: tx_state <= TX_IDLE;
      endcase
    end
  end

endmodule
